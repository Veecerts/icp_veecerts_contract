type NFT = record {
  id : nat64;
  owner : principal;
  metadata : text;
  collection_id : nat64;
};
type NFTCollectionOutput = record {
  id : nat64;
  owner : principal;
  logo : opt text;
  name : text;
  description : text;
  symbol : text;
};
type NFTError = variant {
  TokenNotFound;
  CollectionNotFound;
  InvalidTokenID;
  Unauthorized;
};
type Result = variant { Ok : nat; Err : NFTError };
type Result_1 = variant { Ok : opt NFT; Err : NFTError };
service : () -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  burn_nft : (text) -> (Result);
  collection_metadata : (nat64) -> (opt NFTCollectionOutput) query;
  create_nft : (text, text, text, opt text) -> (Result);
  description : (nat64) -> (opt text) query;
  get_nft_metadata : (text) -> (Result_1) query;
  logo : (nat64) -> (opt text) query;
  mint_nft : (nat64, text) -> (Result);
  name : (nat64) -> (opt text) query;
  symbol : (nat64) -> (opt text) query;
  transfer_nft : (text, principal, principal) -> (Result);
}